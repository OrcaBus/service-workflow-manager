import os
from unittest import mock


from workflow_manager.models import WorkflowRun, LibraryAssociation, State, Payload, Status
from workflow_manager.models import AnalysisRun, AnalysisRunState
from workflow_manager_proc.lambdas import handle_aru_event
from workflow_manager_proc.tests.case import WorkflowManagerProcUnitTestCase


class AruEventHandlerUnitTests(WorkflowManagerProcUnitTestCase):
    fixtures = ['./workflow_manager_proc/tests/fixtures/aru_test_fixtures.json', ]

    def setUp(self) -> None:
        self.env_mock = mock.patch.dict(os.environ, {"EVENT_BUS_NAME": "FooBus"})
        self.env_mock.start()
        super().setUp()

    def tearDown(self) -> None:
        self.env_mock.stop()
        super().tearDown()


    def test_handle_aru_draft_min_event(self):
        """
        python manage.py test workflow_manager_proc.tests.test_handle_aru_event.AruEventHandlerUnitTests.test_handle_aru_draft_min_event
        """
        self.load_mock_aru_draft_min()

        handle_aru_event.handler(self.event, None)

        # check AnalysisRun components
        self.assertEqual(AnalysisRun.objects.count(), 1)
        self.assertEqual(AnalysisRunState.objects.count(), 1)
        test_ar: AnalysisRun = AnalysisRun.objects.first()
        self.assertEqual(test_ar.contexts.count(), 0)

        # check WorkflowRun components (should not exist yet)
        self.assertEqual(WorkflowRun.objects.count(), 0)
        self.assertEqual(State.objects.count(), 0)
        self.assertEqual(Payload.objects.count(), 0)
        self.assertEqual(LibraryAssociation.objects.count(), 0)

    def test_handle_aru_draft_max_event(self):
        """
        python manage.py test workflow_manager_proc.tests.test_handle_aru_event.AruEventHandlerUnitTests.test_handle_aru_draft_max_event
        """
        self.load_mock_aru_draft_max()

        handle_aru_event.handler(self.event, None)

        # check AnalysisRun components
        self.assertEqual(AnalysisRun.objects.count(), 1)
        self.assertEqual(AnalysisRunState.objects.count(), 1)
        test_ar: AnalysisRun = AnalysisRun.objects.first()
        self.assertEqual(test_ar.readsets.count(), 4)
        self.assertEqual(test_ar.libraries.count(), 2)
        self.assertEqual(test_ar.contexts.count(), 2)
        self.assertEqual(test_ar.analysis.analysis_name, "WGS")
        self.assertEqual(test_ar.analysis.analysis_version, "2.0")

        # check WorkflowRun components (should not exist yet)
        self.assertEqual(WorkflowRun.objects.count(), 0)
        self.assertEqual(State.objects.count(), 0)
        self.assertEqual(Payload.objects.count(), 0)
        self.assertEqual(LibraryAssociation.objects.count(), 0)

    def test_handle_aru_ready_max_event_without_draft(self):
        """
        python manage.py test workflow_manager_proc.tests.test_handle_aru_event.AruEventHandlerUnitTests.test_handle_aru_ready_max_event_without_draft
        """
        self.load_mock_aru_ready_max()

        # We expect a failure since there was no DRAFT before the READY event
        self.assertRaises(AnalysisRun.DoesNotExist, handle_aru_event.handler,self.event, None)

        # AnalysisRun components should not exist (as the ARU processing failed)
        self.assertEqual(AnalysisRun.objects.count(), 0)
        self.assertEqual(AnalysisRunState.objects.count(), 0)

        # WorkflowRun components should not exist yet
        self.assertEqual(WorkflowRun.objects.count(), 0)
        self.assertEqual(State.objects.count(), 0)
        self.assertEqual(Payload.objects.count(), 0)
        self.assertEqual(LibraryAssociation.objects.count(), 0)

    def test_handle_aru_ready_max_event(self):
        """
        python manage.py test workflow_manager_proc.tests.test_handle_aru_event.AruEventHandlerUnitTests.test_handle_aru_ready_max_event
        """
        # First the DRAFT event
        self.load_mock_aru_draft_max()
        handle_aru_event.handler(self.event, None)
        # Record the OrcaBus ID of the AnalysisRun (generated by the DRAFT event)
        # This will be needed for the READY event to match up
        ar: AnalysisRun = AnalysisRun.objects.first()
        ar_oid = ar.orcabus_id

        # Then we can test the READY event
        self.load_mock_aru_ready_max()
        # Overwrite the OrcaBus ID to match the DRAFT (see above)
        self.event['detail']['orcabusId'] = ar_oid
        handle_aru_event.handler(self.event, None)

        # AnalysisRun components should not exist (as the ARU processing failed)
        self.assertEqual(AnalysisRun.objects.count(), 1)
        self.assertEqual(AnalysisRunState.objects.count(), 2)
        test_ar: AnalysisRun = AnalysisRun.objects.first()
        self.assertEqual(test_ar.readsets.count(), 4)
        self.assertEqual(test_ar.libraries.count(), 2)
        self.assertEqual(test_ar.contexts.count(), 2)
        self.assertEqual(test_ar.analysis.analysis_name, "WGS")
        self.assertEqual(test_ar.analysis.analysis_version, "2.0")

        # WorkflowRun components should not exist yet
        self.assertEqual(WorkflowRun.objects.count(), 3)
        self.assertEqual(State.objects.count(), 3)
        for s in State.objects.all():
            self.assertEqual(s.status, Status.DRAFT.convention)
        self.assertEqual(Payload.objects.count(), 0)
        self.assertEqual(LibraryAssociation.objects.count(), 6)

    def test_handle_aru_ready_min_event(self):
        """
        python manage.py test workflow_manager_proc.tests.test_handle_aru_event.AruEventHandlerUnitTests.test_handle_aru_ready_min_event
        """
        # First the DRAFT event
        self.load_mock_aru_draft_min()
        handle_aru_event.handler(self.event, None)
        # Record the OrcaBus ID of the AnalysisRun (generated by the DRAFT event)
        # This will be needed for the READY event to match up
        ar: AnalysisRun = AnalysisRun.objects.first()
        ar_oid = ar.orcabus_id

        # Then we can test the READY event
        self.load_mock_aru_ready_min()
        # Overwrite the OrcaBus ID to match the DRAFT (see above)
        self.event['detail']['orcabusId'] = ar_oid
        handle_aru_event.handler(self.event, None)

        # AnalysisRun components should not exist (as the ARU processing failed)
        self.assertEqual(AnalysisRun.objects.count(), 1)
        self.assertEqual(AnalysisRunState.objects.count(), 2)
        test_ar: AnalysisRun = AnalysisRun.objects.first()
        self.assertEqual(test_ar.readsets.count(), 4)
        self.assertEqual(test_ar.libraries.count(), 2)
        self.assertEqual(test_ar.contexts.count(), 0)
        self.assertEqual(test_ar.analysis.analysis_name, "WGS")
        self.assertEqual(test_ar.analysis.analysis_version, "1.0")

        # WorkflowRun components should not exist yet
        self.assertEqual(WorkflowRun.objects.count(), 2)
        self.assertEqual(State.objects.count(), 2)
        for s in State.objects.all():
            self.assertEqual(s.status, Status.DRAFT.convention)
        self.assertEqual(Payload.objects.count(), 0)
        self.assertEqual(LibraryAssociation.objects.count(), 4)
